@page "/forum/{id:guid}"
@using Atlas.Client.Extensions
@using Atlas.Client.Services
@using Atlas.Models.Public
@inject AnonymousService AnonymousService;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

@if (Model == null)
{
    <Loading />
}
else
{
    if (DisplayPage)
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item active" aria-current="page">@Model.Forum.Name</li>
            </ol>
        </nav>

        <div class="row">
            <div class="col-md-6">
                <h4 class="mb-3">@Model.Forum.Name</h4>
            </div>
            <div class="col-md-6 text-right mb-3">
                @if (Model.CanRead)
                {
                    <a href="/forum/@Model.Forum.Id/post" class="btn btn-primary" role="button">New Topic</a>
                }
                else
                {
                    <AuthorizeView>
                        <Authorized>
                            You are not authorized to start a new discussion.
                        </Authorized>
                        <NotAuthorized>
                            <a href="authentication/login?returnUrl=@Uri.EscapeDataString(Navigation.Uri)">Log in</a> to start a new discussion.
                        </NotAuthorized>
                    </AuthorizeView>
                }
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 input-group mb-3">
                <input type="text" class="form-control" placeholder="Search topics in @Model.Forum.Name" @bind-value="Search" @bind-value:event="oninput" @onkeyup="MyKeyUpAsync">
                <button class="btn bg-transparent text-secondary" style="margin-left: -40px; z-index: 100;" @onclick="@(async () => await ClearSearchAsync())">
                    <i class="fa fa-times"></i>
                </button>
                <div class="input-group-append">
                    <button class="btn btn-secondary" type="button" @onclick="@(async () => await SearchAsync())">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
        </div>

        if (Model.Topics.Items.Count == 0)
        {
            <NoRecords Text="No topics found for this forum." />
        }
        else
        {
            <a id="topics"></a>
            <div class="card">
                <ul class="list-group list-group-flush">
                    @foreach (var item in Model.Topics.Items)
                    {
                        <li class="list-group-item py-3">
                            <div class="row">
                                <div class="col-md-auto pr-1">
                                    <a href="/member/@item.MemberId" title="@item.MemberDisplayName">
                                        <Avatar GravatarHash="@item.GravatarHash" GravatarSize="32" Class="mb-2"></Avatar>
                                    </a>
                                </div>
                                <div class="col">
                                    <p class="card-text">
                                        @if (Model.CanRead)
                                        {
                                            <a href="/forum/@Model.Forum.Id/@item.Id" title="@item.Title">@item.Title.ToSafeLengthText(50)</a>
                                        }
                                        else
                                        {
                                            <span title="@item.Title"></span>@item.Title.ToSafeLengthText(50)
                                        }
                                    </p>
                                    <div class="row small">
                                        <div class="col-md-6">
                                            @item.TimeStamp.ToForumLocalDateAndTime()
                                            <span class="font-weight-bold ml-2">@item.TotalReplies</span> Replies
                                        </div>
                                        <div class="col-md-6 text-right">
                                            Most recent post by <a href="/member/@item.MostRecentMemberId" title="@item.MostRecentMemberDisplayName">@item.MostRecentMemberDisplayName.ToSafeLengthText(10)</a>
                                            on @item.MostRecentTimeStamp.ToForumLocalDateAndTime()
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
            <div class="mt-3">
                <Pager TotalPages="@Model.Topics.TotalPages" CurrentPage="@CurrentPage" OnLoadDataCallback="@ChangePageAsync"></Pager>
            </div>
        }
    }
    else
    {
        <SomethingWrong />
    }
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    private ForumPageModel Model { get; set; }

    public bool DisplayPage { get; set; }
    public string Search { get; set; }
    public int CurrentPage { get; set; } = 1;

    private async Task SearchAsync()
    {
        CurrentPage = 1;
        Model = null;
        await LoadDataAsync(CurrentPage);
    }

    private async Task ClearSearchAsync()
    {
        if(!string.IsNullOrWhiteSpace(Search))
        {
            Search = string.Empty;
            CurrentPage = 1;
            Model = null;
            await LoadDataAsync(CurrentPage);
        }
    }

    private async Task MyKeyUpAsync(KeyboardEventArgs key)
    {
        if (key.Code == "Enter")
        {
            await SearchAsync();
        }
    }

    protected async Task ChangePageAsync(int page)
    {
        CurrentPage = page;
        await JsRuntime.InvokeVoidAsync("scrollToTarget", "topics");
        await LoadDataAsync(page);
    }

    private async Task LoadDataAsync(int page)
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        try
        {
            var requestUri = $"api/public/forums/{Id}?page={page}&search={Search}";

            if (user.Identity.IsAuthenticated)
            {
                Model = await Http.GetFromJsonAsync<ForumPageModel>(requestUri);
            }
            else
            {
                Model = await AnonymousService.GetFromJsonAsync<ForumPageModel>(requestUri);
            }

            DisplayPage = true;
        }
        catch (Exception)
        {
            Model = new ForumPageModel();
            DisplayPage = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync(1);
    }
}