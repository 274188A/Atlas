@page "/settings"
@using Atlas.Models.Public
@inject HttpClient Http

@if (Model == null)
{
    <Loading />
}
else
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">Settings</li>
        </ol>
    </nav>

    <h3>Settings</h3>

    <div class="row">
        <div class="col-md-2 text-center">
            <Avatar GravatarHash="@Model.Member.GravatarHash" GravatarSize="128" Class="mb-3"></Avatar>
            <p class="small">Set up your profile image on <a href="https://www.gravatar.com" title="Gravatar">Gravatar</a></p>
        </div>
        <div class="col-md-10">
            <div class="row">
                <div class="col-md-4">
                    <EditForm EditContext="@_editContext" OnSubmit="OnSubmitAsync">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="displayName" class="control-label">Display Name</label>
                            <InputText id="displayName" @bind-Value="Model.Member.DisplayName" Class="form-control" />
                            <ValidationMessage For="@(() => Model.Member.DisplayName)" />
                        </div>
                        <div class="form-group">
                            <input type="submit" value="Update" class="btn btn-primary" />
                        </div>
                        <ValidationSummary />
                    </EditForm>
                </div>
            </div>
            @if (Savings)
            {
                <Loading />
            }
            @if (Saved)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    Settings updated!
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }
        </div>
    </div>
}

@code {
    private SettingsPageModel Model { get; set; }
    private EditContext _editContext;
    private ValidationMessageStore _validationMessageStore;
    private string _currentDisplayName;
    public bool Savings { get; set; }
    public bool Saved { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await Http.GetFromJsonAsync<SettingsPageModel>("api/public/settings/edit");

        _editContext = new EditContext(Model.Member);
        _editContext.OnFieldChanged += HandleFieldChanged;
        _validationMessageStore = new ValidationMessageStore(_editContext);
        _currentDisplayName = Model.Member.DisplayName;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        _validationMessageStore.Clear(e.FieldIdentifier);
    }

    private async Task OnSubmitAsync()
    {
        Savings = true;
        Saved = false;
        if (_editContext.Validate())
        {
            if (await NameIsUniqueAsync(_editContext))
            {
                await Http.PostAsJsonAsync("api/public/settings/update", Model);
                _currentDisplayName = Model.Member.DisplayName;
                Savings = false;
                Saved = true;
            }
            else
            {
                var fieldIdentifier = new FieldIdentifier(_editContext.Model, "DisplayName");
                _validationMessageStore.Clear(fieldIdentifier);
                _validationMessageStore.Add(fieldIdentifier, "Display name already taken.");
                _editContext.NotifyValidationStateChanged();
            }
        }
    }

    private async Task<bool> NameIsUniqueAsync(EditContext editContext)
    {
        var displayNameProp = editContext.Model.GetType().GetProperty("DisplayName");
        var displayNameVal = displayNameProp.GetValue(editContext.Model).ToString();

        var isDisplayNameUnique = displayNameVal == _currentDisplayName || await Http.GetFromJsonAsync<bool>($"api/public/settings/is-display-name-unique/{displayNameVal}");

        return isDisplayNameUnique;
    }

    public void Dispose()
    {
        _editContext.OnFieldChanged -= HandleFieldChanged;
    }
}
