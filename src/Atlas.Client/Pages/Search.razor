@page "/search"
@using Atlas.Client.Extensions
@using Atlas.Client.Services
@using Atlas.Models.Public
@inject AnonymousService AnonymousService;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

<h3 class="mb-3">Search</h3>

<div class="row">
    <div class="col-md-8 input-group mb-3">
        <input type="text" class="form-control" placeholder="Search all posts" @bind-value="SearchTerm" @bind-value:event="oninput" @onkeyup="MyKeyUpAsync">
        <button class="btn bg-transparent text-secondary" style="margin-left: -40px; z-index: 100;" @onclick="@(async () => await ClearSearchAsync())">
            <i class="fa fa-times"></i>
        </button>
        <div class="input-group-append">
            <button class="btn btn-secondary" type="button" @onclick="@(async () => await SearchAsync())">
                <i class="fa fa-search"></i>
            </button>
        </div>
    </div>
</div>

@if (Model == null)
{
    <Loading />
}
else
{
    @if (Model.Posts.Items.Count == 0)
    {
        <NoRecords Text="No posts found for current search." />
    }
    else
    {
        <a id="posts"></a>
        <div class="card">
            <ul class="list-group list-group-flush">
                @foreach (var post in Model.Posts.Items)
                {
                    <li class="list-group-item py-3">
                        <div class="card-text">
                            @if (post.IsTopic)
                            {
                                <a href="/forum/@post.ForumId/@post.TopicId">@post.Title</a>
                            }
                            else
                            {
                                <a href="/forum/@post.ForumId/@post.TopicId">RE: @post.Title</a>
                            }
                        </div>
                        <div class="card-text">
                            @((MarkupString)post.Content.ToSafeLengthText(150))
                        </div>
                        <div class="row small">
                            <div class="col-md-12">
                                By <a href="/member/@post.MemberId">@post.MemberDisplayName</a>
                                on @post.TimeStamp.ToShortDateString() @post.TimeStamp.ToShortTimeString()
                                in <a href="/forum/@post.ForumId">@post.ForumName</a>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
        <div class="mt-3">
            <Pager TotalPages="@Model.Posts.TotalPages" CurrentPage="@CurrentPage" OnLoadDataCallback="@ChangePageAsync"></Pager>
        </div>
    }    
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    public SearchPageModel Model { get; set; }
    public string SearchTerm { get; set; }
    public int CurrentPage { get; set; } = 1;

    private async Task MyKeyUpAsync(KeyboardEventArgs key)
    {
        if (key.Code == "Enter")
        {
            await SearchAsync();
        }
    }

    private async Task SearchAsync()
    {
        Model = null;
        StateHasChanged();
        await OnInitializedAsync();
    }

    private async Task ClearSearchAsync()
    {
        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            SearchTerm = string.Empty;
            Model = null;
            StateHasChanged();
            await OnInitializedAsync();
        }
    }

    protected async Task ChangePageAsync(int page)
    {
        CurrentPage = page;
        await JsRuntime.InvokeVoidAsync("scrollToTarget", "posts");
        await LoadDataAsync(page);
    }

    private async Task LoadDataAsync(int page)
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        var requestUri = $"api/public/search?page={page}&search={SearchTerm}";

        if (user.Identity.IsAuthenticated)
        {
            Model = await Http.GetFromJsonAsync<SearchPageModel>(requestUri);
        }
        else
        {
            Model = await AnonymousService.GetFromJsonAsync<SearchPageModel>(requestUri);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync(1);
    }
}
