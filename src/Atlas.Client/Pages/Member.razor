@page "/member"
@page "/member/{id:guid}"
@using Atlas.Client.Extensions
@using Atlas.Client.Services
@using Atlas.Domain
@using Atlas.Models.Public
@inject AnonymousService AnonymousService;
@inject HttpClient Http

@if (Model == null)
{
    <Loading />
}
else
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Member.DisplayName</li>
        </ol>
    </nav>

    <div class="row">
        <div class="col-md-3 text-center">
            <Avatar GravatarHash="@Model.Member.GravatarHash" GravatarSize="128" Class="mb-3"></Avatar>

            <h4 class="mb-4">@Model.Member.DisplayName</h4>

            <div class="form-control rounded bg-light text-center mb-3 mx-auto" style="width: 8rem;">
                Topics: <span class="font-weight-bold">@Model.Member.TotalTopics</span>
            </div>

            <div class="form-control rounded bg-light text-center mb-3 mx-auto" style="width: 8rem;">
                Replies: <span class="font-weight-bold">@Model.Member.TotalReplies</span>
            </div>

            @if (Model.Member.Status != StatusType.Active)
            {
                <div class="alert alert-warning mx-auto" style="width: 8rem;" role="alert">
                    Inactive
                </div>
            }
        </div>
        <div class="col-md-9">
            <h4 class="mb-3">Last Posts</h4>

            @if (Model.Posts.Items.Count == 0)
            {
                <NoRecords Text="No posts found for this user." />
            }
            else
            {
                <div class="card">
                    <ul class="list-group list-group-flush">
                        @foreach (var post in Model.Posts.Items)
                        {
                            <li class="list-group-item py-3">
                                <div class="card-text">
                                    @if (post.IsTopic)
                                    {
                                        <a href="/forum/@post.ForumId/@post.TopicId">@post.Title</a>
                                    }
                                    else
                                    {
                                        <a href="/forum/@post.ForumId/@post.TopicId">RE: @post.Title</a>
                                    }
                                </div>
                                <div class="card-text">
                                    @((MarkupString)post.Content.ToSafeLengthText(150))
                                </div>
                                <div class="row small">
                                    <div class="col-md-6">
                                        <span class="mr-2">@post.TimeStamp.ToShortDateString() @post.TimeStamp.ToShortTimeString()</span>
                                    </div>
                                    <div class="col-md-6 text-right">
                                        In <a href="/forum/@post.ForumId">@post.ForumName</a>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public Guid? Id { get; set; }

    private MemberPageModel Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        var requestUri = Id == null ? "api/public/members" : $"api/public/members/{Id.Value}";

        if (user.Identity.IsAuthenticated)
        {
            Model = await Http.GetFromJsonAsync<MemberPageModel>(requestUri);
        }
        else
        {
            Model = await AnonymousService.GetFromJsonAsync<MemberPageModel>(requestUri);
        }
    }
}