@page "/forum/{forumId:guid}/{topicId:guid}"
@using System.Security.Claims
@using Atlas.Client.Extensions
@using Atlas.Client.Services
@using Atlas.Domain
@using Atlas.Models.Public
@inject AnonymousService AnonymousService
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

@if (Model == null)
{
    <Loading />
}
else
{
    if (DisplayPage)
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/forum/@ForumId">@Model.Forum.Name</a></li>
                <li class="breadcrumb-item active" aria-current="page">@Model.Topic.Title</li>
            </ol>
        </nav>

        <div class="row">
            <div class="col-md-6">
                <h3 class="mb-3">@Model.Topic.Title</h3>
            </div>
            <div class="col-md-6 text-right mb-3">
                @if (Model.CanReply)
                {
                    <a href="#" @onclick:preventDefault="true" @onclick="@(async () => await NewAsync())" class="btn btn-primary" role="button">New Reply</a>
                }
                @if (CanEditTopic())
                {
                    <a href="/forum/@Model.Forum.Id/post/@Model.Topic.Id/edit" class="btn btn-secondary" role="button">Edit</a>
                }
                @if (CanDeleteTopic())
                {
                    <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#confirm-modal-delete-topic">Delete</button>
                }
            </div>
        </div>

        <div class="card mb-3">
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6 small font-weight-bold">
                        <Avatar GravatarHash="@Model.Topic.GravatarHash" GravatarSize="32" Class="mr-1"></Avatar>
                        <a href="/member/@Model.Topic.MemberId">@Model.Topic.MemberDisplayName</a>
                    </div>
                    <div class="col-md-6 text-right small">
                        @Model.Topic.TimeStamp.ToForumLocalDateAndTime()
                    </div>
                </div>
                <p class="card-text">@((MarkupString)Model.Topic.Content)</p>
            </div>
        </div>

        <a id="replies"></a>
        <h5 class="mb-3">Replies</h5>

        <div class="row">
            <div class="col-md-6 input-group mb-3">
                <input type="text" class="form-control" placeholder="Search replies in @Model.Topic.Title" @bind-value="Search" @bind-value:event="oninput" @onkeyup="MyKeyUpAsync">
                <button class="btn bg-transparent text-secondary" style="margin-left: -40px; z-index: 100;" @onclick="@(async () => await ClearSearchAsync())">
                    <i class="fa fa-times"></i>
                </button>
                <div class="input-group-append">
                    <button class="btn btn-secondary" type="button" @onclick="@(async () => await SearchAsync())">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
        </div>

        if (Model.Replies.Items.Count == 0)
        {
            <NoRecords Text="No replies found for this topic."></NoRecords>
        }
        else
        {
            <div class="card">
                <ul class="list-group list-group-flush">
                    @foreach (var reply in Model.Replies.Items)
                    {
                        <li class="list-group-item py-3">
                            <a id="@reply.Id"></a>
                            <div class="row mb-3 small">
                                <div class="col-md-6 font-weight-bold">
                                    <Avatar GravatarHash="@reply.GravatarHash" GravatarSize="32" Class="mr-1"></Avatar>
                                    <a href="/member/@reply.MemberId">@reply.MemberDisplayName</a>
                                </div>
                                <div class="col-md-6 text-right">
                                    @reply.TimeStamp.ToForumLocalDateAndTime()
                                </div>
                            </div>
                            <div class="card-text">@((MarkupString)reply.Content)</div>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @if (CanEditReply(reply.UserId))
                                    {
                                        <a href="#" @onclick:preventDefault="true" @onclick="@(async () => await EditReplyAsync(reply.Id, reply.OriginalContent, reply.MemberId))">Edit</a>
                                    }
                                    @if (CanDeleteReply(reply.UserId))
                                    {
                                        <a href="#" @onclick:preventDefault="true" @onclick="() => SetDeleteReplyId(reply.Id)" data-toggle="modal" data-target="#confirm-modal-delete-reply">Delete</a>
                                    }
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>

            <div class="mt-3">
                <Pager TotalPages="@Model.Replies.TotalPages" CurrentPage="@CurrentPage" OnLoadDataCallback="@ChangePageAsync"></Pager>
            </div>
        }

        if (Model.CanReply)
        {
            <h5 class="mb-3">@ReplyTitle</h5>
            <div class="row">
                <div class="col-md-8">
                    <a id="reply"></a>
                    <EditForm Context="PostContext" Model="@Model.Post" OnValidSubmit="SaveReplyAsync">
                        <DataAnnotationsValidator />
                        <Editor @bind-Value="@Model.Post.Content" Rows="10"></Editor>
                        <div class="form-group">
                            <div class="row">
                                <div class="col">
                                <input type="submit" value="@ReplyButton" class="btn btn-primary" />
                                </div>
                                <div class="col text-center">
                                    @if (Savings)
                                    {
                                        <Loading />
                                    }
                                </div>
                                <div class="col small text-right mt-2">
                                    <a href="https://www.markdownguide.org/cheat-sheet" target="_blank"><i class="fab fa-markdown mr-2" style="font-size: 1.5rem; vertical-align: middle;"></i>Guide</a>
                                </div>
                            </div>
                        </div>
                        <ValidationSummary />
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <AuthorizeView>
                <Authorized>
                    <p class="mt-3">You are not authorized to reply.</p>
                </Authorized>
                <NotAuthorized>
                    <p class="mt-3"><a href="authentication/login?returnUrl=@Uri.EscapeDataString(Navigation.Uri)">Log in</a> to reply.</p>
                </NotAuthorized>
            </AuthorizeView>
        }

        <ConfirmModal Id="confirm-modal-delete-topic"
                      Title="Delete Topic"
                      Body="Are you sure you want to delete this Topic?"
                      Button="Delete Topic"
                      OnClickCallback="@DeleteTopicAsync" />

        <ConfirmModal Id="confirm-modal-delete-reply"
                      Title="Delete Reply"
                      Body="Are you sure you want to delete this Reply?"
                      Button="Delete Reply"
                      OnClickCallback="@DeleteReplyAsync" />
    }
    else
    {
        <SomethingWrong />
    }
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public Guid ForumId { get; set; }

    [Parameter]
    public Guid TopicId { get; set; }

    private string ReplyTitle => Model.Post.Id != null ? "Update Reply" : "New Reply";
    private string ReplyButton => Model.Post.Id != null ? "Update" : "Save";

    private TopicPageModel Model { get; set; }

    public bool DisplayPage { get; set; }

    public Guid DeleteReplyId { get; set; }

    public ClaimsPrincipal CurrentUser { get; set; }
    public string CurrentUserId { get; set; } = Guid.Empty.ToString();

    public bool Savings { get; set; }
    public string Search { get; set; }
    public int CurrentPage { get; set; } = 1;

    private async Task SearchAsync()
    {
        CurrentPage = 1;
        Model = null;
        await LoadDataAsync(CurrentPage);
    }

    private async Task ClearSearchAsync()
    {
        if(!string.IsNullOrWhiteSpace(Search))
        {
            Search = string.Empty;
            CurrentPage = 1;
            Model = null;
            await LoadDataAsync(CurrentPage);
        }
    }

    private async Task MyKeyUpAsync(KeyboardEventArgs key)
    {
        if (key.Code == "Enter")
        {
            await SearchAsync();
        }
    }

    protected async Task ChangePageAsync(int page)
    {
        CurrentPage = page;
        await JsRuntime.InvokeVoidAsync("scrollToTarget", "replies");
        await LoadDataAsync(page);
    }

    private async Task LoadDataAsync(int page)
    {
        var authState = await AuthenticationStateTask;
        CurrentUser = authState.User;

        try
        {
            var requestUri = $"api/public/topics/{ForumId}/{TopicId}?page={page}&search={Search}";

            if (CurrentUser.Identity.IsAuthenticated)
            {
                Model = await Http.GetFromJsonAsync<TopicPageModel>(requestUri);
            }
            else
            {
                Model = await AnonymousService.GetFromJsonAsync<TopicPageModel>(requestUri);
            }

            DisplayPage = true;

            if (CurrentUser.Identity.IsAuthenticated)
            {
                CurrentUserId = CurrentUser.Identities.First().Claims.FirstOrDefault(x => x.Type == "sub")?.Value;
            }
        }
        catch (Exception)
        {
            Model = new TopicPageModel();
            DisplayPage = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync(1);
    }

    protected void SetDeleteReplyId(Guid Id)
    {
        DeleteReplyId = Id;
    }

    private async Task NewAsync()
    {
        await JsRuntime.InvokeVoidAsync("scrollToTarget", "reply");
    }

    private async Task EditReplyAsync(Guid id, string content, Guid memberId)
    {
        Model.Post.Id = id;
        Model.Post.Content = content;
        Model.Post.MemberId = memberId;
        await JsRuntime.InvokeVoidAsync("scrollToTarget", "reply");
    }

    private async Task SaveReplyAsync()
    {
        Savings = true;

        var requestUri = Model.Post.Id != null
            ? "api/public/replies/update-reply"
            : "api/public/replies/create-reply";

        await Http.PostAsJsonAsync(requestUri, Model);

        Savings = false;

        if (Model.Post.Id != null)
        {
            await JsRuntime.InvokeVoidAsync("scrollToTarget", Model.Post.Id.Value);
        }

        CurrentPage = Model.Replies.TotalPages;

        await LoadDataAsync(CurrentPage);
    }

    protected async Task DeleteTopicAsync(MouseEventArgs e)
    {
        await Http.DeleteAsync($"api/public/topics/delete-topic/{ForumId}/{TopicId}");
        Navigation.NavigateTo($"/forum/{ForumId}");
    }

    protected async Task DeleteReplyAsync(MouseEventArgs e)
    {
        await Http.DeleteAsync($"api/public/replies/delete-reply/{ForumId}/{TopicId}/{DeleteReplyId}");
        await OnInitializedAsync();
    }

    private void Cancel()
    {
        Model.Post.Id = null;
        Model.Post.Content = null;
        Model.Topic.MemberId = Guid.Empty;
    }

    private bool CanEditTopic()
    {
        return Model.CanEdit && Model.Topic.UserId == CurrentUserId || Model.CanModerate || CurrentUser.IsInRole(Consts.RoleNameAdmin);
    }

    private bool CanDeleteTopic()
    {
        return Model.CanDelete && Model.Topic.UserId == CurrentUserId || Model.CanModerate || CurrentUser.IsInRole(Consts.RoleNameAdmin);
    }

    private bool CanEditReply(string replyUserId)
    {
        return Model.CanEdit && replyUserId == CurrentUserId || Model.CanModerate || CurrentUser.IsInRole(Consts.RoleNameAdmin);
    }

    private bool CanDeleteReply(string replyUserId)
    {
        return Model.CanDelete && replyUserId == CurrentUserId || Model.CanModerate || CurrentUser.IsInRole(Consts.RoleNameAdmin);
    }
}