@using System.Security.Cryptography
@using System.Text
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView Policy="Admin">
    <li class="nav-item">
        <a href="/admin/dashboard" class="nav-link">Admin</a>
    </li>
</AuthorizeView>
<AuthorizeView>
    <Authorized>
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <Avatar GravatarHash="@GravatarHash" GravatarSize="24"></Avatar>
            </a>
            <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
                <a class="dropdown-item" href="/member">Profile</a>
                <a class="dropdown-item" href="authentication/profile">Account</a>
                <a class="dropdown-item" href="#" @onclick="BeginSignOut">Log out</a>
            </div>
        </li>
    </Authorized>
    <NotAuthorized>
        <li class="nav-item">
            <a href="authentication/login" class="btn btn-outline-secondary mr-1">Log in</a>
        </li>
        <li class="nav-item">
            <a href="authentication/register" class="btn btn-outline-secondary">Register</a>
        </li>
    </NotAuthorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    public string GravatarHash { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var emailClaim = user.Claims.FirstOrDefault(x => x.Type == "name");
            var md5Hasher = MD5.Create();
            var data = md5Hasher.ComputeHash(Encoding.Default.GetBytes(emailClaim.Value));
            var sBuilder = new StringBuilder();
            for (var i = 0; i < data.Length; i++) sBuilder.Append(data[i].ToString("x2"));
            GravatarHash = sBuilder.ToString();
        }
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}
