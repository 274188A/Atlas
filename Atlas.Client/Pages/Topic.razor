@*@layout PublicLayout*@
@page "/forum/{forumId:guid}/{topicId:guid}"
@using Atlas.Models.Public
@inject HttpClient Http
@inject AnonymousService Service;
@inject NavigationManager Navigation

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item"><a href="/forum/@ForumId">@Model?.Forum.Name</a></li>
        <li class="breadcrumb-item active" aria-current="page">@Model?.Topic.Title</li>
    </ol>
</nav>

<div class="row">
    <div class="col-md-6">
        <h3 class="mb-3">@Model?.Topic.Title</h3>
    </div>
    <div class="col-md-6 text-right mb-3">
        <a href="#reply" class="btn btn-primary" role="button">Reply</a>
    </div>
</div>

@if (Model == null)
{
    <Loading />
}
else
{
    <div>@Model.Topic.Content</div>

    <hr />

    @foreach (var reply in Model.Replies)
    {
        <div>@reply.Content</div>
    }

    <AuthorizeView>
        <Authorized>
            <hr />
            <h3 id="reply">Reply</h3>
            <div class="row">
                <div class="col-md-4">
                    <EditForm Context="PostContext" Model="@Model.Post" OnValidSubmit="SaveAsync">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <InputTextArea id="content" @bind-Value="Model.Post.Content" Class="form-control" />
                            <ValidationMessage For="@(() => Model.Post.Content)" />
                        </div>
                        <div class="form-group">
                            <input type="submit" value="Save" class="btn btn-primary" />
                        </div>
                        <ValidationSummary />
                    </EditForm>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <a href="authentication/login?returnUrl=@Uri.EscapeDataString(Navigation.Uri)">Log in</a> to reply.
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter] public Guid ForumId { get; set; }
    [Parameter] public Guid TopicId { get; set; }
    private TopicPageModel Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await Service.GetFromJsonAsync<TopicPageModel>($"api/public/forum/{ForumId}/{TopicId}");
    }

    private async Task SaveAsync()
    {
        await Http.PostAsJsonAsync("api/public/save-reply", Model);
        await OnInitializedAsync();
    }
}