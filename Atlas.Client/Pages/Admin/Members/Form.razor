@layout AdminLayout
@using Atlas.Models.Admin.Members
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="row">
    <div class="col-md-4">
        <EditForm Id="member-form" EditContext="@_editContext" OnSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="displayName" class="control-label">Display Name</label>
                <InputText id="displayName" @bind-Value="Model.Member.DisplayName" Class="form-control" />
                <ValidationMessage For="@(() => Model.Member.DisplayName)" />
            </div>
            <div class="form-group">
                <input type="submit" value="@Button" class="btn btn-primary" />
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
            <ValidationSummary />
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public EditPageModel Model { get; set; }
    [Parameter] public string Button { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private EditContext _editContext;
    private ValidationMessageStore _validationMessageStore;
    private string _currentDisplayName;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Model.Member);
        _editContext.OnFieldChanged += HandleFieldChanged;
        _validationMessageStore = new ValidationMessageStore(_editContext);
        _currentDisplayName = Model.Member.DisplayName;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        _validationMessageStore.Clear(e.FieldIdentifier);
    }

    private async Task OnSubmit()
    {
        if (_editContext.Validate())
        {
            if (await NameIsUnique(_editContext))
            {
                await OnValidSubmit.InvokeAsync(null);
            }
            else
            {
                var fieldIdentifier = new FieldIdentifier(_editContext.Model, "DisplayName");
                _validationMessageStore.Clear(fieldIdentifier);
                _validationMessageStore.Add(fieldIdentifier, "A member with the same display name already exists.");
                _editContext.NotifyValidationStateChanged();
            }
        }
    }

    private async Task<bool> NameIsUnique(EditContext editContext)
    {
        var displayNameProp = editContext.Model.GetType().GetProperty("DisplayName");
        var displayNameVal = displayNameProp.GetValue(editContext.Model).ToString();

        var isDisplayNameUnique = displayNameVal == _currentDisplayName || await Http.GetFromJsonAsync<bool>($"api/admin/members/is-display-name-unique/{displayNameVal}");

        return isDisplayNameUnique;
    }

    public void Dispose()
    {
        _editContext.OnFieldChanged -= HandleFieldChanged;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin/members");
    }
}
