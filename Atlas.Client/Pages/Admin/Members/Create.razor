@layout AdminLayout
@page "/admin/members/create"
@using System.Text.Json
@using Atlas.Models.Admin.Members
@attribute [Authorize(Policy = "Admin")]
@inject HttpClient Http
@inject NavigationManager NavigationManager

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/admin">Home</a></li>
        <li class="breadcrumb-item"><a href="/admin/members">Members</a></li>
        <li class="breadcrumb-item active" aria-current="page">@Title</li>
    </ol>
</nav>

<h3 class="mb-3">@Title</h3>

@if (Model == null)
{
    <Loading />
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Model.User" OnValidSubmit="SaveAsync">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="email" class="control-label">Email</label>
                    <InputText id="email" @bind-Value="Model.User.Email" Class="form-control" />
                    <ValidationMessage For="@(() => Model.User.Email)" />
                </div>
                <div class="form-group">
                    <label for="password" class="control-label">Password</label>
                    <InputText id="password" @bind-Value="Model.User.Password" Type="password" Class="form-control" />
                    <ValidationMessage For="@(() => Model.User.Password)" />
                </div>
                <div class="form-group">
                    <label for="confirmPassword" class="control-label">Confirm Password</label>
                    <InputText id="confirmPassword" @bind-Value="Model.User.ConfirmPassword" Type="password" Class="form-control" />
                    <ValidationMessage For="@(() => Model.User.ConfirmPassword)" />
                </div>
                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary" />
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>
                <ValidationSummary />
            </EditForm>
        </div>
    </div>
}

@if (Error)
{
    <SomethingWrong />
}

@code {
    private const string Title = "Create New Member";
    private CreatePageModel Model { get; set; }
    public bool Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await Http.GetFromJsonAsync<CreatePageModel>("api/admin/members/create");
    }

    private async Task SaveAsync()
    {
        var response = await Http.PostAsJsonAsync("api/admin/members/save", Model.User);
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var memberId = JsonSerializer.Deserialize<Guid>(content);
            NavigationManager.NavigateTo($"/admin/members/edit/{memberId}");
        }
        else
        {
            Error = true;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin/members");
    }
}
