@*@layout PublicLayout*@
@page "/forum/{id:guid}"
@using Atlas.Models.Public
@inject AnonymousService Service;
@inject NavigationManager Navigation

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">@Model?.Forum.Name</li>
    </ol>
</nav>

<div class="row">
    <div class="col-md-6">
        <h3 class="mb-3">@Model?.Forum.Name</h3>
    </div>
    <div class="col-md-6 text-right mb-3">
        <AuthorizeView>
            <Authorized>
                <a href="/forum/@Model?.Forum.Id/post" class="btn btn-primary" role="button">New Topic</a>
            </Authorized>
            <NotAuthorized>
                <a href="authentication/login?returnUrl=@Uri.EscapeDataString(Navigation.Uri)">Log in</a> to start a new discussion.
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@if (Model == null)
{
    <Loading />
}
else if (Model.Topics.Count == 0)
{
    <NoRecords Text="No topics found for this forum." />
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col">&nbsp;</th>
                <th scope="col">Title</th>
                <th scope="col">Total Replies</th>
                <th scope="col">&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Topics)
            {
                <tr>
                    <td class="text-center">&nbsp;</td>
                    <td><a href="/forum/@Model.Forum.Id/@item.Id">@item.Title</a></td>
                    <td class="text-center">@item.TotalReplies</td>
                    <td>&nbsp;</td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" @onclick=@(async ()=>await NavigateToPage("previous"))>&laquo;</a>
            </li>
            @for (int i = startPage; i <= endPage; i++)
            {
                var currentPage = i;
                <li class="page-item">
                    <button class="btn btn-link page-link" role="link" @onclick=@(async () =>await refreshRecords(currentPage))>@currentPage</button>
                    <a class="page-link" href="#" @onclick=@(async () =>await refreshRecords(currentPage))>@currentPage</a>
                </li>
            }
            <li class="page-item">
                <a class="page-link" href="#" @onclick=@(async ()=>await NavigateToPage("next"))>&raquo;</a>
            </li>
        </ul>
    </nav>

    @*<div class="pagination">
        <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("previous"))>Prev</button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick=@(async () =>await refreshRecords(currentPage))>
                @currentPage
            </button>
        }

        <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("next"))>Next</button>
    </div>*@




}

@code {
    [Parameter] public Guid Id { get; set; }
    private ForumPageModel Model { get; set; }

    //protected override async Task OnParametersSetAsync()
    //{
    //    Model = await Service.GetFromJsonAsync<ForumPageModel>($"api/public/forum/{Id}");
    //}

    protected override async Task OnInitializedAsync()
    {
        //display total page buttons
        pagerSize = 3;
        pageSize = 2;
        curPage = 1;
        //articleModel = await articleManager.ListAll((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        //totalRecords = await articleManager.Count(searchTerm);
        Model = await Service.GetFromJsonAsync<ForumPageModel>($"api/public/forum/{Id}?page={curPage}");
        totalRecords = 10;
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }










    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "ID";
    string sortDir = "DESC";

    public async Task refreshRecords(int currentPage)
    {
        Model = await Service.GetFromJsonAsync<ForumPageModel>($"api/public/forum/{Id}?page={currentPage}");
        //articleModel = await articleManager.ListAll((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }
}