@page "/forum/{forumId:guid}/post"
@page "/forum/{forumId:guid}/post/{topicid:guid}/edit"
@using Atlas.Models.Public
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Model == null)
{
    <Loading />
}
else
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="/forum/@ForumId">@Model.Forum.Name</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Title</li>
        </ol>
    </nav>

    <h3 class="mb-3">@Title</h3>

    <div class="row">
        <div class="col-md-8">
            <EditForm Model="@Model.Topic" OnValidSubmit="SaveAsync">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="title" class="control-label">Title</label>
                    <InputText id="title" @bind-Value="Model.Topic.Title" Class="form-control" />
                    <ValidationMessage For="@(() => Model.Topic.Title)" />
                </div>
                <Editor @bind-Value="@Model.Topic.Content" Rows="20"></Editor>
                <div class="form-group">
                    <input type="submit" value="@Button" class="btn btn-primary" />
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <div class="small float-right mt-2">
                        <a href="https://www.markdownguide.org/cheat-sheet" target="_blank"><i class="fab fa-markdown mr-2" style="font-size: 1.5rem; vertical-align: middle;"></i>Guide</a>
                    </div>
                </div>
                <ValidationSummary />
            </EditForm>
        </div>
    </div>
}

@code {
    private string Title => TopicId != null ? "Update Topic" : "Create New Topic";
    private string Button => TopicId != null ? "Update" : "Create";

    [Parameter]
    public Guid ForumId { get; set; }

    [Parameter]
    public Guid? TopicId { get; set; }

    private PostPageModel Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var requestUri = TopicId != null
            ? $"api/public/forum/{ForumId}/edit-topic/{TopicId.Value}"
            : $"api/public/forum/{ForumId}/new-topic";

        Model = await Http.GetFromJsonAsync<PostPageModel>(requestUri);
    }

    private async Task SaveAsync()
    {
        var requestUri = TopicId != null
            ? "api/public/update-topic"
            : "api/public/create-topic";

        await Http.PostAsJsonAsync(requestUri, Model);

        var redirectUri = TopicId != null
            ? $"/forum/{ForumId}/{TopicId.Value}"
            : $"/forum/{ForumId}";

        NavigationManager.NavigateTo(redirectUri);
    }

    private void Cancel()
    {
        var cancelUri = TopicId != null
            ? $"/forum/{ForumId}/{TopicId.Value}"
            : $"/forum/{ForumId}";

        NavigationManager.NavigateTo(cancelUri);
    }
}
