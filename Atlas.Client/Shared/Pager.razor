@* Based on: https://www.thecodehubs.com/visual-studio-blazor-template-with-dapper-and-net-core-3-1/*@

<nav aria-label="Pager">
    <ul class="pagination">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="btn btn-link page-link" role="link" @onclick="@(async () => await NavigateToPage("first"))">First</button>
        </li>
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="btn btn-link page-link" role="link" @onclick="@(async () => await NavigateToPage("previous"))">Previous</button>
        </li>
        @for (var i = _startPage; i <= _endPage; i++)
        {
            var currentPage = i;
            <li class="page-item @(currentPage==CurrentPage ? "active" : "")">
                <button class="btn btn-link page-link" role="link" @onclick="@(async () => await RefreshData(currentPage))">@currentPage</button>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="btn btn-link page-link" role="link" @onclick="@(async () => await NavigateToPage("next"))">Next</button>
        </li>
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="btn btn-link page-link" role="link" @onclick="@(async () => await NavigateToPage("last"))">Last</button>
        </li>
    </ul>
</nav>

@code {
    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public EventCallback<int> OnLoadDataCallback { get; set; }

    protected override void OnInitialized()
    {
        SetPager("forward");
    }

    private const int PagerSize = 10;

    int _startPage;
    int _endPage;

    public async Task RefreshData(int page)
    {
        await OnLoadDataCallback.InvokeAsync(page);
        CurrentPage = page;
        StateHasChanged();
    }

    public void SetPager(string direction)
    {
        if (direction == "forward" && _endPage < TotalPages)
        {
            _startPage = _endPage + 1;
            if (_endPage + PagerSize < TotalPages)
            {
                _endPage = _startPage + PagerSize - 1;
            }
            else
            {
                _endPage = TotalPages;
            }
            StateHasChanged();
        }
        else if (direction == "back" && _startPage > 1)
        {
            _endPage = _startPage - 1;
            _startPage -= PagerSize;
        }
        else
        {
            _startPage = 1;
            _endPage = TotalPages;
        }
    }

    public async Task NavigateToPage(string action)
    {
        if (action == "next")
        {
            if (CurrentPage < TotalPages)
            {
                if (CurrentPage == _endPage)
                {
                    SetPager("forward");
                }
                CurrentPage += 1;
            }
        }
        else if (action == "previous")
        {
            if (CurrentPage > 1)
            {
                if (CurrentPage == _startPage)
                {
                    SetPager("back");
                }
                CurrentPage -= 1;
            }
        }
        else if (action == "first")
        {
            _startPage = 0;
            _endPage = 0;
            SetPager("forward");
            CurrentPage = 1;
        }
        else if (action == "last")
        {
            if (PagerSize < TotalPages)
            {
                _endPage = TotalPages - 1;
                _startPage = _endPage - PagerSize;
                SetPager("forward");
            }

            CurrentPage = TotalPages;
        }

        await RefreshData(CurrentPage);
    }
}
