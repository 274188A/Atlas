<nav aria-label="Pager">
    <ul class="pagination justify-content-center">
        <li class="page-item">
            <button class="btn btn-link page-link" role="link" @onclick=@(async () => await refreshRecords(1))>First</button>
        </li>
        <li class="page-item">
            <button class="btn btn-link page-link" role="link" @onclick=@(async () => await NavigateToPage("previous"))>Previous</button>
        </li>
        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <li class="page-item @(currentPage==curPage ? "active" : "")">
                <button class="btn btn-link page-link" role="link" @onclick=@(async () => await refreshRecords(currentPage))>@currentPage</button>
            </li>
        }
        <li class="page-item">
            <button class="btn btn-link page-link" role="link" @onclick=@(async () => await NavigateToPage("next"))>Next</button>
        </li>
        <li class="page-item">
            <button class="btn btn-link page-link" role="link" @onclick=@(async () => await refreshRecords(TotalPages))>Last</button>
        </li>
    </ul>
</nav>

@code {
    //[Parameter] public Guid Id { get; set; }
    //private ForumPageModel Model { get; set; }

    [Parameter] public int TotalPages { get; set; }

    [Parameter] public EventCallback<int> OnClickCallback { get; set; }

    protected override void OnParametersSet()
    {
        //display total page buttons
        pagerSize = 10;
        //pageSize = 2;
        curPage = 1;
        //articleModel = await articleManager.ListAll((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        //totalRecords = await articleManager.Count(searchTerm);
        //Model = await Service.GetFromJsonAsync<ForumPageModel>($"api/public/forum/{Id}?page={curPage}");
        //totalRecords = 10;
        //totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        //pageSize = Model.Data.PageSize;
        //totalRecords = Model.Data.TotalRecords;
        //totalPages = TotalPages;
        SetPagerSize("forward");
        //StateHasChanged();
    }

    //int totalPages;
    //int totalRecords;
    int curPage;
    int pagerSize;
    //int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "ID";
    string sortDir = "DESC";

    public async Task refreshRecords(int currentPage)
    {
        await OnClickCallback.InvokeAsync(currentPage);
        //Model = await Service.GetFromJsonAsync<ForumPageModel>($"api/public/forum/{Id}?page={currentPage}");
        //articleModel = await articleManager.ListAll((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        //pageSize = Model.Data.PageSize;
        //totalRecords = Model.Data.TotalRecords;
        //totalPages = TotalPages;
        StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < TotalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < TotalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = TotalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = TotalPages;
        }
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < TotalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }
}
